<!DOCTYPE html>
<html>
  <head>
    <title>Prompty</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
      /* カスタムCSS */
      .content-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
      }
      
      .navbar-brand {
        padding-left: 0;
      }
      
      @media (max-width: 992px) {
        .navbar-brand {
          margin-left: 0;
        }
      }
    </style>
    <%= javascript_importmap_tags %>
  </head>

  <body>
    <%= render 'shared/navbar' %>

    <div class="content-container mt-4">
      <div id="flash-container">
        <% if flash[:notice].present? %>
          <div class="alert alert-success alert-dismissible fade show" role="alert">
            <%= flash[:notice] %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="閉じる"></button>
          </div>
        <% end %>
        
        <% if flash[:alert].present? %>
          <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <%= flash[:alert] %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="閉じる"></button>
          </div>
        <% end %>
      </div>
      
      <%= yield %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
      // CSRFトークンを更新する関数
      document.addEventListener('DOMContentLoaded', function() {
        const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        
        // フォーム送信前にCSRFトークンを更新
        document.addEventListener('submit', function(e) {
          const tokenInputs = e.target.querySelectorAll('input[name="authenticity_token"]');
          tokenInputs.forEach(input => {
            input.value = token;
          });
        });
        
        // aria-hidden属性を安全に処理 - より強力なバージョン
        function removeAriaHidden() {
          document.body.removeAttribute('aria-hidden');
          
          // data-theme属性やclass属性が設定されていても、aria-hiddenを削除
          if (document.body.getAttribute('aria-hidden') === 'true') {
            Object.defineProperty(document.body, 'ariaHidden', {
              get: function() { return null; },
              set: function(val) { /* 何もしない */ },
              configurable: true
            });
          }
        }
        
        // 初期実行
        removeAriaHidden();
        
        // 定期的に実行（100ms間隔）
        setInterval(removeAriaHidden, 100);
        
        // MutationObserverでも監視
        const observer = new MutationObserver(function(mutations) {
          removeAriaHidden();
        });
        
        observer.observe(document.body, { 
          attributes: true, 
          attributeFilter: ['aria-hidden', 'data-theme', 'class'] 
        });
      });
    </script>
  </body>
</html>

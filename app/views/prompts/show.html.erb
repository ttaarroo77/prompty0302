<%= csrf_meta_tags %>
<%= csp_meta_tag %>

<div class="row">
  <div class="col-md-8">
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">プロンプト詳細</h5>
        <div class="d-flex">
          <button type="button" id="toggle-edit-mode" class="btn btn-sm btn-outline-primary me-2">編集</button>
          <%= button_to "削除", prompt_path(@prompt), method: :delete, class: "btn btn-sm btn-outline-danger", form: { data: { turbo_confirm: "本当に削除しますか？" } }, style: "display: inline-block;" %>
        </div>
      </div>
      
      <!-- 表示モード -->
      <div class="card-body" id="view-mode">
        <h2><%= @prompt.title %></h2>
        
        <% if @prompt.url.present? %>
          <div class="mb-3">
            <strong>URL:</strong>
            <%= link_to @prompt.url, @prompt.url, target: "_blank" %>
          </div>
        <% end %>
        
        <div class="mb-3">
          <strong>説明:</strong>
          <div class="mt-2"><%= simple_format(@prompt.description) %></div>
        </div>
      </div>
      
      <!-- 編集モード -->
      <div class="card-body" id="edit-mode" style="display: none;">
        <%= form_with(model: @prompt, local: true, id: "edit-form") do |f| %>
          <% if @prompt.errors.any? %>
            <div class="alert alert-danger">
              <ul class="mb-0">
                <% @prompt.errors.full_messages.each do |message| %>
                  <li><%= message %></li>
                <% end %>
              </ul>
            </div>
          <% end %>
          
          <div class="mb-3">
            <%= f.label :title, "タイトル", class: "form-label" %>
            <%= f.text_field :title, class: "form-control" %>
          </div>
          
          <div class="mb-3">
            <%= f.label :url, "URL", class: "form-label" %>
            <%= f.url_field :url, class: "form-control" %>
          </div>
          
          <div class="mb-3">
            <%= f.label :description, "説明", class: "form-label" %>
            <%= f.text_area :description, rows: 8, class: "form-control" %>
          </div>
          
          <div class="d-flex justify-content-end">
            <button type="button" id="cancel-edit" class="btn btn-outline-secondary me-2">キャンセル</button>
            <%= f.submit "更新する", class: "btn btn-primary" %>
          </div>
        <% end %>
      </div>
    </div>
    
    <%= link_to "← 一覧に戻る", prompts_path, class: "btn btn-outline-secondary" %>
  </div>
  
  <div class="col-md-4">
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">タグ</h5>
      </div>
      <div class="card-body">
        <!-- 既存のタグを表示 -->
        <div class="mb-3">
          <% @prompt.tags.each do |tag| %>
            <div class="badge bg-primary text-white me-1 p-2 mb-1">
              <%= tag.name %>
              <%= button_to '×', prompt_tag_path(@prompt, tag), method: :delete, class: 'btn-close btn-close-white ms-1', form: { style: 'display: inline;' }, form_class: 'd-inline', aria: { label: 'タグを削除' }, data: { confirm: '本当に削除しますか？' } %>
            </div>
          <% end %>
        </div>

        <!-- タグ追加フォーム -->
        <%= form_with(model: [@prompt, Tag.new], local: true, class: 'mb-3 new_tag') do |form| %>
          <div class="input-group">
            <%= form.text_field :name, class: 'form-control', placeholder: '新しいタグを追加...' %>
            <button type="submit" class="btn btn-primary">追加</button>
          </div>
        <% end %>

        <!-- タグ提案セクション -->
        <div class="mb-3">
          <h6>AIタグ提案:</h6>
          
          <div id="suggested-tags-container">
            <div id="suggested-tags">
              <% if @suggested_tags.nil? || @suggested_tags.empty? %>
                <div class="alert alert-light">
                  <p>AIにタグを提案してもらうボタンをクリックすると、ここにタグが表示されます。</p>
                </div>
              <% else %>
                <h6 class="card-title">提案されたタグ</h6>
                <p class="text-muted small mb-2">タグをクリックで追加できます</p>
                <div class="mb-2">
                  <% @suggested_tags.each do |tag| %>
                    <button type="button" 
                            class="btn btn-sm btn-outline-primary me-1 mb-1 suggested-tag-btn" 
                            data-tag-name="<%= tag.name %>">
                      <%= tag.name %>
                    </button>
                  <% end %>
                </div>
              <% end %>
            </div>
          </div>
          
          <%= link_to "AIにタグを提案してもらう", prompt_path(@prompt, suggested: true), 
              class: "btn btn-outline-primary w-100 mt-2", 
              id: "suggest-tags-button" %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 編集モード切り替え
    const toggleEditButton = document.getElementById('toggle-edit-mode');
    const cancelEditButton = document.getElementById('cancel-edit');
    const viewMode = document.getElementById('view-mode');
    const editMode = document.getElementById('edit-mode');
    
    if (toggleEditButton && cancelEditButton && viewMode && editMode) {
      toggleEditButton.addEventListener('click', function() {
        viewMode.style.display = 'none';
        editMode.style.display = 'block';
        toggleEditButton.style.display = 'none';  // 編集モード時はボタンを非表示
      });
      
      cancelEditButton.addEventListener('click', function() {
        editMode.style.display = 'none';
        viewMode.style.display = 'block';
        toggleEditButton.style.display = 'inline-block';  // 表示モードに戻る時はボタンを表示
        toggleEditButton.textContent = '編集';
      });
    }
    
    // タグ提案ボタンクリック処理
    document.addEventListener('click', function(e) {
      const suggestedTagBtn = e.target.closest('.suggested-tag-btn');
      if (suggestedTagBtn) {
        e.preventDefault(); // クリックイベントのデフォルト動作を停止
        e.stopPropagation(); // イベントの伝播を停止
        
        const tagName = suggestedTagBtn.dataset.tagName;
        const tagInput = document.querySelector('input[name="tag[name]"]');
        const tagForm = document.querySelector('form.new_tag');
        
        if (tagInput && tagForm) {
          tagInput.value = tagName;
          
          // CSRFトークンを取得
          const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
          
          // フォームデータを作成
          const formData = new FormData(tagForm);
          
          // Fetchを使用して非同期でタグを追加
          fetch(tagForm.action, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': csrfToken
            },
            body: formData
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('ネットワークレスポンスが正常ではありません');
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              console.log('タグ追加成功:', data);
              
              // 2. サイドバーのタグリストも更新
              const sidebarTagsContainer = document.querySelector('.col-md-4 .card-body .mb-3:first-child');
              if (sidebarTagsContainer) {
                const sidebarTagElement = document.createElement('div');
                sidebarTagElement.className = 'badge bg-primary text-white me-1 p-2 mb-1';
                sidebarTagElement.innerHTML = `
                  ${tagName}
                  <form action="/prompts/${data.prompt_id}/tags/${data.tag_id}" method="post" style="display: inline;">
                    <input type="hidden" name="_method" value="delete">
                    <input type="hidden" name="authenticity_token" value="${csrfToken}">
                    <button type="submit" class="btn-close btn-close-white ms-1" aria-label="タグを削除"></button>
                  </form>
                `;
                sidebarTagsContainer.appendChild(sidebarTagElement);
              }
              
              // 3. 使用済みの提案タグを非表示にする
              suggestedTagBtn.style.display = 'none';
              
              // 4. 入力欄をクリア
              tagInput.value = '';
              
              // 5. 成功メッセージを表示
              const flashContainer = document.getElementById('flash-container');
              if (flashContainer) {
                // 古いアラートをクリア
                const existingAlerts = flashContainer.querySelectorAll('.alert');
                existingAlerts.forEach(alert => alert.remove());
                
                // 新しい成功メッセージを追加
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success alert-dismissible fade show';
                successAlert.setAttribute('role', 'alert');
                successAlert.innerHTML = `
                  タグが追加されました。
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                flashContainer.appendChild(successAlert);
                
                // 5秒後に自動的に非表示
                setTimeout(() => {
                  successAlert.remove();
                }, 5000);
              }
            } else {
              throw new Error(data.message || 'タグの追加に失敗しました');
            }
          })
          .catch(error => {
            console.error('エラー:', error);
            
            // エラーメッセージを表示
            const flashContainer = document.getElementById('flash-container');
            if (flashContainer) {
              // 古いアラートをクリア
              const existingAlerts = flashContainer.querySelectorAll('.alert');
              existingAlerts.forEach(alert => alert.remove());
              
              // 新しいエラーメッセージを追加
              const errorAlert = document.createElement('div');
              errorAlert.className = 'alert alert-danger alert-dismissible fade show';
              errorAlert.setAttribute('role', 'alert');
              errorAlert.innerHTML = `
                タグの追加に失敗しました。
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              `;
              flashContainer.appendChild(errorAlert);
            }
          });
        }
      }
    });
    
    // フォーム送信の非同期化
    const editForm = document.getElementById('edit-form');
    if (editForm) {
      editForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(editForm);
        const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
        
        fetch(editForm.action, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log('プロンプト更新成功:', data);
            
            // ビューを更新
            document.getElementById('view-mode').style.display = 'block';
            document.getElementById('edit-mode').style.display = 'none';
            toggleEditButton.style.display = 'inline-block';
            
            // 成功メッセージを表示
            const flashContainer = document.getElementById('flash-container');
            if (flashContainer) {
              const existingAlerts = flashContainer.querySelectorAll('.alert');
              existingAlerts.forEach(alert => alert.remove());
              
              const successAlert = document.createElement('div');
              successAlert.className = 'alert alert-success alert-dismissible fade show';
              successAlert.setAttribute('role', 'alert');
              successAlert.innerHTML = `
                プロンプトが更新されました。
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              `;
              flashContainer.appendChild(successAlert);
              
              setTimeout(() => {
                successAlert.remove();
              }, 5000);
            }
          }
        })
        .catch(error => {
          console.error('更新エラー:', error);
          
          // エラーメッセージを表示
          const flashContainer = document.getElementById('flash-container');
          if (flashContainer) {
            const existingAlerts = flashContainer.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());
            
            const errorAlert = document.createElement('div');
            errorAlert.className = 'alert alert-danger alert-dismissible fade show';
            errorAlert.setAttribute('role', 'alert');
            errorAlert.innerHTML = `
              プロンプトの更新に失敗しました。
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            flashContainer.appendChild(errorAlert);
          }
        });
      });
    }
    
    // コンソールにデバッグ情報を出力
    console.log('DOM ready in prompt show view');
    console.log('Suggested tag buttons:', document.querySelectorAll('.suggested-tag-btn').length);
  });
</script>

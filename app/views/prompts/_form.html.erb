<%= form_with(model: prompt, local: true) do |form| %>
  <% if prompt.errors.any? %>
    <div id="error_explanation" class="alert alert-danger mb-4">
      <h5 class="alert-heading mb-4">入力内容にエラーがあります</h5>
      <ul class="mb-0">
        <% prompt.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-4">
    <div class="mb-3">
      <%= form.label :title, "タイトル", class: "form-label text-muted" %>
      <%= form.text_field :title, class: "form-control form-control-lg", maxlength: 100 %>
      <div class="text-muted text-end">
        <span class="title-counter">0</span>/100
      </div>
      <div class="invalid-feedback title-error" style="display: none;">
        タイトルは100文字以内で入力してください
      </div>
    </div>

    <div class="mb-3">
      <%= form.label :url, "URL", class: "form-label text-muted" %>
      <%= form.url_field :url, class: "form-control", inputmode: "url", maxlength: 255 %>
      <div class="text-muted text-end">
        <span class="url-counter">0</span>/255
      </div>
      <div class="invalid-feedback url-error" style="display: none;">
        URLは255文字以内で入力してください
      </div>
    </div>

    <div class="mb-3">
      <%= form.label :description, "説明", class: "form-label text-muted" %>
      <%= form.text_area :description, rows: 8, class: "form-control", maxlength: 500 %>
      <div class="text-muted text-end">
        <span class="description-counter">0</span>/500
      </div>
      <div class="invalid-feedback description-error" style="display: none;">
        説明は500文字以内で入力してください
      </div>
    </div>
  </div>

  <div class="d-flex justify-content-end gap-2">
    <% if prompt.persisted? %>
      <%= link_to "キャンセル", prompt_path(prompt), class: "btn btn-outline-secondary", style: "min-height: 38px; min-width: 88px;" %>
      <%= form.submit "更新する", class: "btn btn-dark", style: "min-height: 38px; min-width: 88px;" %>
    <% else %>
      <%= link_to "キャンセル", prompts_path, class: "btn btn-outline-secondary", style: "min-height: 38px; min-width: 88px;" %>
      <%= form.submit "作成する", class: "btn btn-dark", style: "min-height: 38px; min-width: 88px;" %>
    <% end %>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const updateCounter = (input, counter, error) => {
    const count = input.value.length;
    counter.textContent = count;
    if (count > input.maxLength) {
      counter.classList.add('text-danger');
      input.classList.add('is-invalid');
      error.style.display = 'block';
    } else {
      counter.classList.remove('text-danger');
      input.classList.remove('is-invalid');
      error.style.display = 'none';
    }
  };

  const titleInput = document.querySelector('#prompt_title');
  const titleCounter = document.querySelector('.title-counter');
  const titleError = document.querySelector('.title-error');
  if (titleInput && titleCounter && titleError) {
    titleInput.addEventListener('input', () => updateCounter(titleInput, titleCounter, titleError));
    updateCounter(titleInput, titleCounter, titleError);
  }

  const urlInput = document.querySelector('#prompt_url');
  const urlCounter = document.querySelector('.url-counter');
  const urlError = document.querySelector('.url-error');
  if (urlInput && urlCounter && urlError) {
    urlInput.addEventListener('input', () => updateCounter(urlInput, urlCounter, urlError));
    updateCounter(urlInput, urlCounter, urlError);
  }

  const descriptionInput = document.querySelector('#prompt_description');
  const descriptionCounter = document.querySelector('.description-counter');
  const descriptionError = document.querySelector('.description-error');
  if (descriptionInput && descriptionCounter && descriptionError) {
    descriptionInput.addEventListener('input', () => updateCounter(descriptionInput, descriptionCounter, descriptionError));
    updateCounter(descriptionInput, descriptionCounter, descriptionError);
  }
});
</script>